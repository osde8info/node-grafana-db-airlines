swagger: "2.0"
info:
  title: Airline API
  description: A detailed description of the operation.
    Use markdown for rich text representation,
    such as **bold**, *italic*, and [links](https://swagger.io).
  version: 1.0.0
host: localhost:3000
schemes:
  - http
tags:
  - name: Registered User
    description: User management
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://example.com/oauth/authorize
    tokenUrl: https://example.com/oauth/token
paths:
  /reg_user/{user_id}:
    get:
      tags:
        - Registered User
      summary: Get info by user id
      parameters:
        - name: user_id
          in: path
          description: user id
          type: integer
          required: true
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: number
                    first_names:
                      type: string
                    second_name:
                      type: string
                    email:
                      type: string
                    nic:
                      type: string
                    passport_id:
                      type: string
                    username:
                      type: string
              token:
                type: string
        404:
          description: Not found
        401:
          description: Unauthorized
        502:
          description: Server Error
    put:
      tags:
        - Registered User
      summary: Update user
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: users details
          schema:
            type: object
            required:
              - first_name
              - second_name
              - email
              - nic
              - passport_id
              - birthday
              - username
              - password
            properties:
              first_name:
                type: string
              second_name:
                type: string
              email:
                type: string
              nic:
                type: string
              passport_id:
                type: string
              birthday:
                type: string
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: OK
        404:
          description: User not Found
        400:
          description: Bad request
    delete:
      tags:
        - Registered User
      produces:
        - application/json
      summary: Delete a user
      responses:
        200:
          description: OK
        404:
          description: User not Found
        400:
          description: Bad request

  /reg_user/:
    post:
      tags:
        - Registered User
      parameters:
        - in: body
          name: user
          description: users details
          schema:
            type: object
            required:
              - first_name
              - second_name
              - email
              - nic
              - passport_id
              - birthday
              - username
              - password
            properties:
              first_name:
                type: string
              second_name:
                type: string
              email:
                type: string
              nic:
                type: string
              passport_id:
                type: string
              birthday:
                type: string
              username:
                type: string
              password:
                type: string
      produces:
        - application/json
      summary: Create a new User
      responses:
        201:
          description: Created
        400:
          description: Bad request
        502:
          description: Server Error

  /reg_user/{user_id}/booking:
    get:
      tags:
        - Registered User
      summary: Get all the bookings by the customer
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
      responses:
        200:
          description: OK
        404:
          description: Not found
        502:
          description: Server Error
    post:
      tags:
        - Registered User
      summary: Create a new booking
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          type: integer
          required: true
      responses:
        201:
          description: Created
        404:
          description: Not found
        400:
          description: Bad request
        502:
          description: Server Error
  /reg_user/login/:
    post:
      tags:
        - Registered User
      consumes:
        - application/json
      parameters:
        - name: details
          in: body
          schema:
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Login Success, Token created
        400:
          description: Bad request
        502:
          description: Server Error

            